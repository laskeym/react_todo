{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","errors","onSubmit","bind","assertThisInitialized","onChange","e","preventDefault","newTodo","_id","uuid","v4","setState","defineProperty","target","name","value","react_default","a","createElement","className","type","placeholder","Component","TodoItem","editTodo","todoItem","todo","id","onDelete","editText","_this2","onClick","Todo","todos","loading","handleSubmit","handleDelete","JSON","parse","localStorage","getItem","setItem","stringify","isEdit","toConsumableArray","forEach","push","filter","todoItems","map","index","components_TodoItem","key","components_TodoForm","App","components_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.911def64.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport uuid from \"uuid\";\n\nclass TodoForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      errors: {}\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const newTodo = {\n      _id: uuid.v4(),\n      text: this.state.text\n    };\n\n    if (this.state.text === null || this.state.text === \"\") {\n      this.setState({ errors: { text: \"Field cannot be blank!\" } });\n    } else {\n      this.props.onSubmit(newTodo);\n      this.setState({ text: \"\", errors: {} });\n    }\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"todo-form mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <form onSubmit={this.onSubmit}>\n              <div className=\"form-group\">\n                <input\n                  type=\"text\"\n                  name=\"text\"\n                  className=\"form-control form-control-lg\"\n                  placeholder=\"What do I have to do today...\"\n                  value={this.state.text}\n                  onChange={this.onChange}\n                />\n                {this.state.errors.text ? (\n                  <div>{this.state.errors.text}</div>\n                ) : null}\n              </div>\n              <input type=\"submit\" value=\"Add Item\" className=\"btn btn-dark\" />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React, { Component } from \"react\";\n\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      _id: null,\n      text: \"\",\n      errors: {},\n      editTodo: false\n    };\n  }\n\n  componentWillMount() {\n    const { todoItem } = this.props;\n\n    this.setState({\n      _id: todoItem._id,\n      text: todoItem.text\n    });\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    const todo = {\n      _id: this.state._id,\n      text: this.state.text\n    };\n\n    if (this.state.text === null || this.state.text === \"\") {\n      this.setState({ errors: { text: \"Field cannot be blank!\" } });\n    } else {\n      this.props.onSubmit(todo);\n      this.setState({\n        text: this.state.text,\n        errors: {},\n        editTodo: !this.state.editTodo\n      });\n    }\n  }\n\n  onDelete(id) {\n    this.props.onDelete(id);\n  }\n\n  render() {\n    const { todoItem } = this.props;\n    const { editTodo } = this.state;\n    let editText;\n\n    if (editTodo) {\n      editText = (\n        <div className=\"col-md-10\">\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              name=\"text\"\n              className=\"form-control\"\n              value={this.state.text}\n              onChange={this.onChange.bind(this)}\n            />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"todo-item\">\n        <div className=\"row\">\n          <div className=\"col-md-8 mx-auto card p-4\">\n            <div className=\"row\">\n              {editTodo ? (\n                editText\n              ) : (\n                <div className=\"col-md-10\">{todoItem.text}</div>\n              )}\n              <div className=\"col-md-2 my-auto\">\n                <button\n                  className=\"float-right mx-2\"\n                  onClick={this.onDelete.bind(this, todoItem._id)}\n                >\n                  <i className=\"fas fa-trash-alt\" />\n                </button>\n                {editTodo ? (\n                  <button\n                    className=\"float-right\"\n                    onClick={this.onSubmit.bind(this)}\n                  >\n                    <i className=\"fas fa-check\" />\n                  </button>\n                ) : (\n                  <button\n                    className=\"float-right\"\n                    onClick={() => {\n                      this.setState({ editTodo: !this.state.editTodo });\n                    }}\n                  >\n                    <i className=\"fas fa-pencil-alt\" />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport TodoItem from \"./TodoItem\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      loading: false\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n\n  componentWillMount() {\n    // Check to see if there is a todo list in local storage\n    const todos = JSON.parse(localStorage.getItem(\"todos\"));\n\n    if (todos === null) {\n      this.setState({ loading: true });\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      this.setState({\n        loading: false,\n        todos\n      });\n    }\n  }\n\n  handleSubmit(todoItem) {\n    const todos = [...this.state.todos];\n    let isEdit;\n\n    // Check if submitted todo Item is an edit, if so check isEdit flag\n    isEdit = false;\n\n    todos.forEach(todo => {\n      if (todo._id === todoItem._id) {\n        todo.text = todoItem.text;\n        isEdit = true;\n      }\n    });\n\n    // If iedEdit flag is true, update the todos array state, else add new item\n    if (isEdit === false) {\n      todos.push(todoItem);\n    }\n\n    // Set state and storage\n    this.setState({ todos });\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }\n\n  handleDelete(id) {\n    const todos = this.state.todos.filter(todo => todo._id !== id);\n\n    // Set state and storage\n    this.setState({ todos });\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }\n\n  render() {\n    const { todos } = this.state;\n    let todoItems;\n\n    todoItems = todos.map((todo, index) => (\n      <TodoItem\n        key={todo._id}\n        todoItem={todo}\n        onSubmit={this.handleSubmit}\n        onDelete={this.handleDelete}\n      />\n    ));\n\n    return (\n      <div className=\"to-do\">\n        <TodoForm onSubmit={this.handleSubmit} />\n        {todoItems}\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport Todo from \"./components/Todo\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1 className=\"my-3 text-center\">React To Do</h1>\n          <Todo />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}